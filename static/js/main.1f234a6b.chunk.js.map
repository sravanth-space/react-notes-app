{"version":3,"sources":["components/Note.js","components/AddNote.js","components/NotesList.js","components/Search.js","components/Header.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Note","id","text","date","handleDeleteNote","className","onClick","size","AddNote","handleAddNote","useState","noteText","setNoteText","rows","cols","placeholder","value","onChange","event","target","length","trim","NotesList","notes","map","note","Search","handleSearchNote","type","Header","handleToggleDarkMode","previousDarkMode","App","nanoid","setNotes","searchText","setSearchText","darkMode","setDarkMode","useEffect","savedNotes","JSON","parse","localStorage","getItem","setItem","stringify","filter","toLowerCase","includes","Date","newNote","toLocaleDateString","newNotes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1f234a6b.chunk.js","sourcesContent":["import { MdDeleteForever } from 'react-icons/md';\r\n\r\nconst Note = ({ id, text, date, handleDeleteNote }) => {\r\n\treturn (\r\n\t\t<div className='note'>\r\n\t\t\t<span>{text}</span>\r\n\t\t\t<div className='note-footer'>\r\n\t\t\t\t<small>{date}</small>\r\n\t\t\t\t<MdDeleteForever\r\n\t\t\t\t\tonClick={() => handleDeleteNote(id)}\r\n\t\t\t\t\tclassName='delete-icon'\r\n\t\t\t\t\tsize='1.3em'\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Note;\r\n","import { useState } from 'react';\r\n\r\nconst AddNote = ({ handleAddNote }) => {\r\n\tconst [noteText, setNoteText] = useState('');\r\n\tconst characterLimit = 200;\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tif (characterLimit - event.target.value.length >= 0) {\r\n\t\t\tsetNoteText(event.target.value);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleSaveClick = () => {\r\n\t\tif (noteText.trim().length > 0) {\r\n\t\t\thandleAddNote(noteText);\r\n\t\t\tsetNoteText('');\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='note new'>\r\n\t\t\t<textarea\r\n\t\t\t\trows='8'\r\n\t\t\t\tcols='10'\r\n\t\t\t\tplaceholder='Type to add a note...'\r\n\t\t\t\tvalue={noteText}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t></textarea>\r\n\t\t\t<div className='note-footer'>\r\n\t\t\t\t<small>\r\n\t\t\t\t\t{characterLimit - noteText.length} Remaining\r\n\t\t\t\t</small>\r\n\t\t\t\t<button className='save' onClick={handleSaveClick}>\r\n\t\t\t\t\tSave\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default AddNote;\r\n","import Note from \"./Note\";\r\nimport AddNote from \"./AddNote\";\r\n\r\nconst NotesList = ({ notes, handleAddNote, handleDeleteNote }) => {\r\n  return (\r\n    <div className=\"notes-list\">\r\n      <AddNote handleAddNote={handleAddNote} />\r\n      {notes.map((note) => (\r\n        <Note\r\n          id={note.id}\r\n          key={note.id}\r\n          text={note.text}\r\n          date={note.date}\r\n          handleDeleteNote={handleDeleteNote}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotesList;\r\n","import React from 'react';\r\nimport { MdSearch } from 'react-icons/md';\r\n\r\nconst Search = ({ handleSearchNote }) => {\r\n\treturn (\r\n\t\t<div className='search'>\r\n\t\t\t<MdSearch className='search-icons' size='1.3em' />\r\n\t\t\t<input\r\n\t\t\t\tonChange={(event) =>\r\n\t\t\t\t\thandleSearchNote(event.target.value)\r\n\t\t\t\t}\r\n\t\t\t\ttype='text'\r\n\t\t\t\tplaceholder='type to search...'\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nconst Header = ({ handleToggleDarkMode }) => {\r\n\treturn (\r\n\t\t<div className='header'>\r\n\t\t\t<h1>Notes</h1>\r\n\t\t\t<button\r\n\t\t\t\tonClick={() =>\r\n\t\t\t\t\thandleToggleDarkMode(\r\n\t\t\t\t\t\t(previousDarkMode) => !previousDarkMode\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\tclassName='save'\r\n\t\t\t>\r\n\t\t\t\tToggle Mode\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import { useState, useEffect } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport NotesList from \"./components/NotesList\";\r\nimport Search from \"./components/Search\";\r\nimport Header from \"./components/Header\";\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([\r\n    {\r\n      id: nanoid(),\r\n      text: \"This is my first note!\",\r\n      date: \"15/04/2021\",\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      text: \"This is my second note!\",\r\n      date: \"21/04/2021\",\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      text: \"This is my third note!\",\r\n      date: \"28/04/2021\",\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      text: \"This is my new note!\",\r\n      date: \"30/04/2021\",\r\n    },\r\n  ]);\r\n\r\n  const [searchText, setSearchText] = useState(\"\");\r\n\r\n  const [darkMode, setDarkMode] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const savedNotes = JSON.parse(localStorage.getItem(\"react-notes-app-data\"));\r\n\r\n    if (savedNotes) {\r\n      setNotes(savedNotes);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"react-notes-app-data\", JSON.stringify(notes));\r\n  }, [notes]);\r\n\r\n  const addNote = (text) => {\r\n    const date = new Date();\r\n    const newNote = {\r\n      id: nanoid(),\r\n      text: text,\r\n      date: date.toLocaleDateString(),\r\n    };\r\n    const newNotes = [...notes, newNote];\r\n    setNotes(newNotes);\r\n  };\r\n\r\n  const deleteNote = (id) => {\r\n    const newNotes = notes.filter((note) => note.id !== id);\r\n    setNotes(newNotes);\r\n  };\r\n\r\n  return (\r\n    <div className={`${darkMode && \"dark-mode\"}`}>\r\n      <div className=\"container\">\r\n        <Header handleToggleDarkMode={setDarkMode} />\r\n        <Search handleSearchNote={setSearchText} />\r\n        <NotesList\r\n          notes={notes.filter((note) =>\r\n            note.text.toLowerCase().includes(searchText.toLowerCase().trim())\r\n          )}\r\n          handleAddNote={addNote}\r\n          handleDeleteNote={deleteNote}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}